// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id              String         @id @default(uuid())
  name            String?
  email           String         @unique
  role            String         // Puede ser 'participant', 'admin', etc.
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Información técnica y profesional
  profileType     String?        // Tipo de perfil: "UX/UI", "PM", "QA", "Frontend", "Backend", "Fullstack", "Community Manager", "Team Leader", "Tech Lead", etc.
  experienceYears Int?           // Años de experiencia
  userSkills      UserSkill[]    @relation("UserSkills") // Relación con habilidades técnicas
  
  // Relaciones con otras entidades
  sentMessages    Message[]      @relation("SentMessages")
  receivedChats   ChatMember[]   @relation("UserChatMembers")
  simulations     UserSimulation[] @relation("UserSimulations")
  activities      Activity[]     @relation("UserActivities")
  projectTeams    ProjectTeamMember[] @relation("UserProjectTeams")
  
  // Relaciones para notificaciones
  sentNotifications      Notification[] @relation("SentNotifications")
  receivedNotifications  Notification[] @relation("ReceivedNotifications")
  
  // Relación para estados de chat
  chatStates             ChatUserState[] @relation("UserChatStates")
}

// Modelo de habilidades técnicas
model Skill {
  id            String      @id @default(uuid())
  name          String      // Nombre de la habilidad (React, Node.js, PostgreSQL, etc.)
  category      SkillCategory // Categoría de la habilidad (Frontend, Backend, Database, etc.)
  userSkills    UserSkill[] @relation("SkillRelation")
  
  @@unique([name, category])
}

// Relación entre usuarios y habilidades con nivel de competencia
model UserSkill {
  id            String      @id @default(uuid())
  userId        String
  skillId       String
  proficiencyLevel ProficiencyLevel // Nivel de competencia
  yearsOfExperience Int?    // Años de experiencia específica con esta tecnología
  isMainSkill   Boolean     @default(false) // Si es una habilidad principal del usuario
  
  // Relaciones
  user          User        @relation("UserSkills", fields: [userId], references: [id])
  skill         Skill       @relation("SkillRelation", fields: [skillId], references: [id])
  
  @@unique([userId, skillId])
}

// Categorías de habilidades
enum SkillCategory {
  FRONTEND
  BACKEND
  DATABASE
  DEVOPS
  MOBILE
  DESIGN
  TESTING
  PROJECT_MANAGEMENT
  OTHERS
}

// Niveles de competencia
enum ProficiencyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

// Chat model - Para conversaciones
model Chat {
  id          String      @id @default(uuid())
  name        String?     // Opcional para chats grupales
  type        ChatType    // INDIVIDUAL, GROUP, SUBGROUP
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relaciones
  messages    Message[]   @relation("ChatMessages")
  members     ChatMember[] @relation("ChatMembers")
  
  // Relación con notificaciones
  notifications Notification[] @relation("ChatNotifications")
  
  // Relación para estados de chat
  userStates    ChatUserState[] @relation("ChatUserStates")
}

// Modelo para gestionar el estado de un chat para un usuario específico
model ChatUserState {
  id                String    @id @default(uuid())
  userId            String
  chatId            String
  
  // Estados de visibilidad
  isDeleted         Boolean   @default(false)
  deletedAt         DateTime?
  
  // Estados de presencia y actividad
  isOnline          Boolean   @default(false)    // Si el usuario está activo en este chat
  lastSeen          DateTime  @default(now())    // Última vez que el usuario estuvo activo
  isTyping          Boolean   @default(false)    // Si el usuario está escribiendo
  lastTypingAt      DateTime? // Timestamp de cuando empezó a escribir
  
  // Control de lectura de mensajes
  lastReadMessageId String?   // ID del último mensaje leído
  unreadCount       Int       @default(0)        // Cantidad de mensajes no leídos
  
  // Configuración de notificaciones para este chat
  isMuted           Boolean   @default(false)    // Si las notificaciones están silenciadas
  
  // Relaciones
  user              User      @relation("UserChatStates", fields: [userId], references: [id])
  chat              Chat      @relation("ChatUserStates", fields: [chatId], references: [id])
  lastReadMessage   Message?  @relation("LastReadMessages", fields: [lastReadMessageId], references: [id])
  
  @@unique([userId, chatId])
}

// Tipo de chat
enum ChatType {
  INDIVIDUAL  // 1 a 1
  GROUP       // Grupal (Todo el equipo)
  SUBGROUP    // Subgrupal (Parte del equipo)
}

// Relación muchos a muchos entre User y Chat
model ChatMember {
  id        String    @id @default(uuid())
  userId    String
  chatId    String
  joinedAt  DateTime  @default(now())
  
  // Relaciones
  user      User      @relation("UserChatMembers", fields: [userId], references: [id])
  chat      Chat      @relation("ChatMembers", fields: [chatId], references: [id])

  @@unique([userId, chatId])
}

// Mensaje en un chat
model Message {
  id          String    @id @default(uuid())
  content     String
  senderId    String
  chatId      String
  replyToId   String?   // Para respuestas a otros mensajes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  chat        Chat      @relation("ChatMessages", fields: [chatId], references: [id])
  replyTo     Message?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     Message[] @relation("MessageReplies")
  
  // Relación con notificaciones
  notifications Notification[] @relation("MessageNotifications")
  
  // Relación para mensajes leídos
  readBy       ChatUserState[] @relation("LastReadMessages")
}

// Modelo de Notificaciones
model Notification {
  id            String            @id @default(uuid())
  type          String            // Tipo de notificación (NEW_MESSAGE, USER_JOINED_CHAT, etc.)
  content       String            // Contenido de la notificación
  recipientId   String            // Usuario que recibe la notificación
  senderId      String?           // Usuario que generó la notificación (opcional)
  chatId        String?           // Chat relacionado (opcional)
  messageId     String?           // Mensaje relacionado (opcional)
  read          Boolean           @default(false) // Si la notificación ha sido leída
  createdAt     DateTime          @default(now())
  
  // Relaciones
  recipient     User              @relation("ReceivedNotifications", fields: [recipientId], references: [id])
  sender        User?             @relation("SentNotifications", fields: [senderId], references: [id])
  chat          Chat?             @relation("ChatNotifications", fields: [chatId], references: [id])
  message       Message?          @relation("MessageNotifications", fields: [messageId], references: [id])
}

// Simulación Laboral
model Simulation {
  id          String    @id @default(uuid())
  name        String
  description String?
  type        SimulationType // OPEN, COMPANY
  startDate   DateTime
  endDate     DateTime
  status      SimulationStatus
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  companyId   String?   // ID de la empresa en caso de simulación tipo COMPANY
  
  // Relaciones
  users       UserSimulation[] @relation("SimulationUsers")
  projects    Project[]    @relation("SimulationProjects")
  activities  Activity[]   @relation("SimulationActivities")
  schedules   WeeklySchedule[] @relation("SimulationSchedules")
  finalReport SimulationReport? @relation("SimulationReport")
}

// Modelo para el cronograma semanal
model WeeklySchedule {
  id            String    @id @default(uuid())
  simulationId  String
  weekNumber    Int       // Número de semana (1-5)
  startDate     DateTime
  endDate       DateTime
  theme         String?   // Tema de la semana
  objectives    String?   // Objetivos generales de la semana
  
  // Relaciones
  simulation    Simulation @relation("SimulationSchedules", fields: [simulationId], references: [id])
  tasks         Task[]     @relation("ScheduleTasks")
  meetings      Meeting[]  @relation("ScheduleMeetings")
  deliverables  Deliverable[] @relation("ScheduleDeliverables")
  
  @@unique([simulationId, weekNumber])
}

// Tareas asociadas al cronograma
model Task {
  id                String    @id @default(uuid())
  weeklyScheduleId  String
  title             String
  description       String
  dueDate           DateTime
  assignedRoles     String[]  // Array de roles a los que aplica la tarea
  
  // Relaciones
  weeklySchedule    WeeklySchedule @relation("ScheduleTasks", fields: [weeklyScheduleId], references: [id])
}

// Reuniones programadas
model Meeting {
  id                String    @id @default(uuid())
  weeklyScheduleId  String
  title             String
  description       String?
  dateTime          DateTime
  duration          Int       // Duración en minutos
  isRequired        Boolean   @default(true)
  
  // Relaciones
  weeklySchedule    WeeklySchedule @relation("ScheduleMeetings", fields: [weeklyScheduleId], references: [id])
}

// Entregables
model Deliverable {
  id                String    @id @default(uuid())
  weeklyScheduleId  String
  title             String
  description       String
  dueDate           DateTime
  assignedRoles     String[]  // Array de roles responsables
  
  // Relaciones
  weeklySchedule    WeeklySchedule @relation("ScheduleDeliverables", fields: [weeklyScheduleId], references: [id])
}

// Reporte final de simulación
model SimulationReport {
  id              String    @id @default(uuid())
  simulationId    String    @unique
  generatedAt     DateTime  @default(now())
  metrics         Json      // Métricas y estadísticas en formato JSON
  conclusions     String?   // Resumen y conclusiones
  
  // Relaciones
  simulation      Simulation @relation("SimulationReport", fields: [simulationId], references: [id])
}

enum SimulationType {
  OPEN      // Simulación abierta
  COMPANY   // Simulación parametrizada por empresa
}

enum SimulationStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

// Relación muchos a muchos entre User y Simulation
model UserSimulation {
  id            String    @id @default(uuid())
  userId        String
  simulationId  String
  role          String    // Ejemplo: "backend", "frontend", etc.
  vertical      String    // Ejemplo: "web", "mobile", etc.
  joinedAt      DateTime  @default(now())
  
  // Relaciones
  user          User      @relation("UserSimulations", fields: [userId], references: [id])
  simulation    Simulation @relation("SimulationUsers", fields: [simulationId], references: [id])

  @@unique([userId, simulationId])
}

// Proyecto asignado a una simulación
model Project {
  id            String    @id @default(uuid())
  name          String
  description   String
  simulationId  String
  projectType   ProjectType // Tipo de proyecto: OPEN o COMPANY
  companyId     String?   // ID de la empresa en caso de ser un proyecto asignado
  requirements  String?   // Requisitos específicos
  scope         String?   // Alcance del proyecto
  resources     Json?     // Recursos disponibles (en formato JSON)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relaciones
  simulation    Simulation @relation("SimulationProjects", fields: [simulationId], references: [id])
  teams         ProjectTeam[] @relation("ProjectTeams")
}

enum ProjectType {
  OPEN    // Proyecto propio en simulaciones abiertas
  COMPANY // Proyecto asignado por empresa
}

// Equipos asignados a cada proyecto
model ProjectTeam {
  id          String    @id @default(uuid())
  projectId   String
  name        String
  
  // Relaciones
  project     Project   @relation("ProjectTeams", fields: [projectId], references: [id])
  members     ProjectTeamMember[] @relation("TeamMembers")
}

// Miembros del equipo de proyecto
model ProjectTeamMember {
  id            String    @id @default(uuid())
  teamId        String
  userId        String
  role          String    // Rol específico en este proyecto
  
  // Relaciones
  team          ProjectTeam @relation("TeamMembers", fields: [teamId], references: [id])
  user          User     @relation("UserProjectTeams", fields: [userId], references: [id])
  
  @@unique([teamId, userId])
}

// Actividades/Eventos registrados
model Activity {
  id            String    @id @default(uuid())
  userId        String
  simulationId  String
  type          ActivityType
  details       String?
  timestamp     DateTime  @default(now())
  
  // Relaciones
  user          User      @relation("UserActivities", fields: [userId], references: [id])
  simulation    Simulation @relation("SimulationActivities", fields: [simulationId], references: [id])
}

enum ActivityType {
  LOGIN
  JOIN_MEET
  SEND_MESSAGE
  UPLOAD_DELIVERABLE
  COMPLETE_TASK
} 